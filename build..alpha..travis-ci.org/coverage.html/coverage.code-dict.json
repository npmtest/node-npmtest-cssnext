{"/home/travis/build/npmtest/node-npmtest-cssnext/test.js":"/* istanbul instrument in package npmtest_cssnext */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cssnext/lib.npmtest_cssnext.js":"/* istanbul instrument in package npmtest_cssnext */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_cssnext = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_cssnext = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-cssnext/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-cssnext && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_cssnext */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_cssnext\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_cssnext.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_cssnext.rollup.js'] =\n            local.assetsDict['/assets.npmtest_cssnext.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_cssnext.__dirname + '/lib.npmtest_cssnext.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cssnext/node_modules/cssnext/dist/index.js":"\"use strict\";\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar _fs = require(\"fs\");\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nvar _postcss = require(\"postcss\");\n\nvar _postcss2 = _interopRequireDefault(_postcss);\n\nvar _caniuseApi = require(\"caniuse-api\");\n\nvar _fixes = require(\"./fixes\");\n\nvar _fixes2 = _interopRequireDefault(_fixes);\n\nvar _features = require(\"./features\");\n\nvar _features2 = _interopRequireDefault(_features);\n\nvar _featuresActivationMap = require(\"./features-activation-map\");\n\nvar _featuresActivationMap2 = _interopRequireDefault(_featuresActivationMap);\n\nvar _optionMessages = require(\"./option.messages\");\n\nvar _optionMessages2 = _interopRequireDefault(_optionMessages);\n\n/**\n * Process a CSS `string`\n *\n * @param {String} string (optional)\n * @param {Object} options (optional)\n * @return {String} if string is given, or {Object} (postcss instance)\n */\nfunction cssnext(string, options) {\n  // prevent usage as a webpack loader\n  // webpack run loader as function with an object as context\n  // this object contains a \"webpack\" key set to true if used as a loader\n  // https://github.com/cssnext/cssnext/issues/61\n  if (typeof this === \"object\" && this.webpack === true) {\n    throw new Error(\"⚠︎ Don't use directly cssnext as a webpack loader. \" + \"Please use `cssnext-loader` instead: \" + \"https://github.com/cssnext/cssnext-loader\");\n  }\n\n  if (arguments.length === 0) {\n    options = {};\n  }\n  if (arguments.length === 1 && typeof string === \"object\") {\n    options = string;\n    string = undefined;\n  } else {\n    options = options || {};\n  }\n\n  options = _extends({\n    features: {},\n    // options.browsers is deliberately undefined by defaut to inherit\n    // browserslist default behavior\n    // default sourcemap\n    // if `map` option is passed, `sourcemap` option is ignored\n    // if `sourcemap` option is passed, a inline map is used\n    map: options.sourcemap ? true : null,\n    messages: true\n  }, options);\n\n  var features = options.features;\n\n  // propagate browsers option to autoprefixer\n  if (features.autoprefixer !== false) {\n    features.autoprefixer = _extends({\n      browsers: features.autoprefixer && features.autoprefixer.browsers ? features.autoprefixer.browsers : options.browsers\n    }, features.autoprefixer || {});\n\n    // autoprefixer doesn't like an \"undefined\" value. Related to coffee ?\n    if (features.autoprefixer.browsers === undefined) {\n      delete features.autoprefixer.browsers;\n    }\n  }\n\n  var postcss = (0, _postcss2[\"default\"])();\n\n  // only enable import & url if fs module is available\n  if (_fs2[\"default\"] && _fs2[\"default\"].readFile) {\n    // @import\n    if (options[\"import\"] !== false) {\n      var plugin = require(\"postcss-import\")(typeof options[\"import\"] === \"object\" ? _extends({}, options[\"import\"]) : undefined);\n      postcss.use(plugin);\n    }\n\n    // url() adjustements\n    if (options.url !== false) {\n      var plugin = require(\"postcss-url\")(typeof options.url === \"object\" ? _extends({}, options.url) : undefined);\n      postcss.use(plugin);\n    }\n  }\n\n  // tmp fixes\n  Object.keys(_fixes2[\"default\"]).forEach(function (key) {\n    return postcss.use(_fixes2[\"default\"][key]);\n  });\n\n  // features\n  Object.keys(cssnext.features).forEach(function (key) {\n    // feature is auto enabled if: not disable && (enabled || no data yet ||\n    // !supported yet)\n    if (\n    // feature is not disabled\n    features[key] !== false && (\n    // feature is enabled\n    features[key] === true ||\n\n    // feature don't have any browsers data (yet)\n    _featuresActivationMap2[\"default\"][key] === undefined ||\n\n    // feature is not yet supported by the browsers scope\n    _featuresActivationMap2[\"default\"][key] && _featuresActivationMap2[\"default\"][key][0] && !(0, _caniuseApi.isSupported)(_featuresActivationMap2[\"default\"][key][0], options.browsers))) {\n      var plugin = cssnext.features[key](typeof features[key] === \"object\" ? _extends({}, features[key]) : undefined);\n      postcss.use(plugin);\n    }\n  });\n\n  if (options.plugins) {\n    if (!Array.isArray(options.plugins)) {\n      throw new Error(\"cssnext 'plugins' option expect an array of PostCSS plugins. \" + \"You provided \" + typeof options.plugins);\n    }\n\n    options.plugins.forEach(function (plugin) {\n      return postcss.use(plugin);\n    });\n  }\n\n  // minification\n  if (options.compress) {\n    postcss.use(require(\"cssnano\")(typeof options.compress === \"object\" ? options.compress : {}));\n  }\n\n  // console plugins MUST be called after others because\n  // by default it remove messages from the registry\n  // (which make sense)\n  if (options.messages) {\n    (0, _optionMessages2[\"default\"])(options).forEach(function (plugin) {\n      postcss.use(plugin);\n    });\n  }\n\n  // classic API if string is passed\n  if (typeof string === \"string\") {\n    var result = postcss.process(string, options);\n\n    // default behavior, cssnext returns a css string if no or inline sourcemap\n    if (options.map === null || (options.map === true || options.map.inline)) {\n      return result.css;\n    }\n\n    // if a specific map has been asked, we are returning css + map\n    return result;\n  }\n  // or return the postcss instance that can be consumed as a postcss plugin\n  else {\n      return postcss;\n    }\n}\n\n/**\n * Expose cssnext features\n *\n * @type {Object}\n */\ncssnext.features = _features2[\"default\"];\n\n/**\n * Expose cssnext\n *\n * @type {Function}\n */\nmodule.exports = cssnext;","/home/travis/build/npmtest/node-npmtest-cssnext/node_modules/cssnext/dist/fixes/index.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar _customSelectorsMissingColon = require(\"./custom-selectors-missing-colon\");\n\nvar _customSelectorsMissingColon2 = _interopRequireDefault(_customSelectorsMissingColon);\n\nexports[\"default\"] = {\n  customSelectorsMissingColon: _customSelectorsMissingColon2[\"default\"]\n};\nmodule.exports = exports[\"default\"];","/home/travis/build/npmtest/node-npmtest-cssnext/node_modules/cssnext/dist/fixes/custom-selectors-missing-colon.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar _postcss = require(\"postcss\");\n\nvar _postcss2 = _interopRequireDefault(_postcss);\n\nexports[\"default\"] = _postcss2[\"default\"].plugin(\"cssnext\", function () {\n  var cs = \"@custom-selector\";\n\n  return function (styles, result) {\n    var alert = false;\n    styles.eachAtRule(\"custom-selector\", function (rule) {\n      if (rule.params.indexOf(\"--\") === 0) {\n\n        // display big warning once\n        if (!alert) {\n          alert = true;\n          result.warn(\"Previously \" + cs + \" were working with and without pseudo \" + (\"syntax ':'. Now you must use '\" + cs + \" :--{name}' syntax \") + (\"instead of '\" + cs + \" --{name}'. The support of \") + \"syntax without ':' and this warning will be remove in the \" + \"next major release.\");\n        }\n\n        result.warn([\"Incorrect syntax for \" + cs + \".\", \"  \" + cs + \" \" + rule.params, \"Should be:\", \"  \" + cs + \" :\" + rule.params].join(\"\\n\\n\"), { node: rule });\n\n        // fix for postcss-custom-selectors 2.x\n        rule.params = \":\" + rule.params;\n      }\n    });\n  };\n});\nmodule.exports = exports[\"default\"];","/home/travis/build/npmtest/node-npmtest-cssnext/node_modules/cssnext/dist/features.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = {\n  // Reminder: order is important\n  customProperties: function customProperties(options) {\n    return require(\"postcss-custom-properties\")(options);\n  },\n  calc: function calc(options) {\n    return require(\"postcss-calc\")(options);\n  },\n  customMedia: function customMedia(options) {\n    return require(\"postcss-custom-media\")(options);\n  },\n  mediaQueriesRange: function mediaQueriesRange(options) {\n    return require(\"postcss-media-minmax\")(options);\n  },\n  customSelectors: function customSelectors(options) {\n    return require(\"postcss-custom-selectors\")(options);\n  },\n  colorRebeccapurple: function colorRebeccapurple(options) {\n    return require(\"postcss-color-rebeccapurple\")(options);\n  },\n  colorHwb: function colorHwb(options) {\n    return require(\"postcss-color-hwb\")(options);\n  },\n  colorGray: function colorGray(options) {\n    return require(\"postcss-color-gray\")(options);\n  },\n  colorHexAlpha: function colorHexAlpha(options) {\n    return require(\"postcss-color-hex-alpha\")(options);\n  },\n  colorFunction: function colorFunction(options) {\n    return require(\"postcss-color-function\")(options);\n  },\n  fontVariant: function fontVariant(options) {\n    return require(\"postcss-font-variant\")(options);\n  },\n  filter: function filter(options) {\n    return require(\"pleeease-filters\")(options);\n  },\n  rem: function rem(options) {\n    return require(\"pixrem\")(options);\n  },\n  pseudoElements: function pseudoElements(options) {\n    return require(\"postcss-pseudoelements\")(options);\n  },\n  pseudoClassMatches: function pseudoClassMatches(options) {\n    return require(\"postcss-selector-matches\")(options);\n  },\n  pseudoClassNot: function pseudoClassNot(options) {\n    return require(\"postcss-selector-not\")(options);\n  },\n  pseudoClassAnyLink: function pseudoClassAnyLink(options) {\n    return require(\"postcss-pseudo-class-any-link\")(options);\n  },\n  colorRgba: function colorRgba(options) {\n    return require(\"postcss-color-rgba-fallback\")(options);\n  },\n  autoprefixer: function autoprefixer(options) {\n    return require(\"autoprefixer-core\")(options);\n  }\n};\nmodule.exports = exports[\"default\"];","/home/travis/build/npmtest/node-npmtest-cssnext/node_modules/cssnext/dist/features-activation-map.js":"// Some features might affect others (eg: var() in a calc()\n// in order to prevent issue, the map contains a sort of dependencies list\n//\n// null == always enable (& no caniuse data)\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = {\n  customProperties: [\"css-variables\"],\n  // calc() transformation only make sense with transformed custom properties,\n  // don't you think ?\n  // calc: null,\n  // @todo open PR on caniuse repo https://github.com/Fyrd/caniuse\n  // customMedia: [null],\n  // mediaQueriesRange: [null],\n  // customSelectors: [null],\n  // colorRebeccapurple: [null], // @todo can be done easily\n  // colorHwb: [null],\n  // colorGray: [null],\n  // colorHexAlpha: [null],\n  // colorFunction:[null],\n  // fontVariant: [null],\n  // @todo can be done using a callback, this is only used for Firefox < 35\n  // filter: [null],\n  rem: [\"rem\"],\n  pseudoElements: [\"css-gencontent\"],\n  // pseudoClassMatches: [null],\n  // pseudoClassNot: [null],\n  colorRgba: [\"css3-colors\"]\n};\nmodule.exports = exports[\"default\"];\n// will always be null since autoprefixer does the same game as we do\n// autoprefixer: [null]","/home/travis/build/npmtest/node-npmtest-cssnext/node_modules/cssnext/dist/option.messages.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }\n\nvar _postcssReporter = require(\"postcss-reporter\");\n\nvar _postcssReporter2 = _interopRequireDefault(_postcssReporter);\n\n// https://github.com/postcss/postcss-messages/issues/16\n// import postcssMessagesCSS from \"postcss-messages\"\n\nvar _pluginsMessages = require(\"./plugins/messages\");\n\nvar _pluginsMessages2 = _interopRequireDefault(_pluginsMessages);\n\nvar _optionMessagesBrowserStylesJs = require(\"./option.messages.browser.styles.js\");\n\nvar _optionMessagesBrowserStylesJs2 = _interopRequireDefault(_optionMessagesBrowserStylesJs);\n\nexports[\"default\"] = function (options) {\n  // true === all interfaces\n  if (options.messages === true) {\n    return [(0, _pluginsMessages2[\"default\"])({ styles: _optionMessagesBrowserStylesJs2[\"default\"] }), _postcssReporter2[\"default\"]];\n  }\n\n  // object: only the one you want\n  if (typeof options.messages === \"object\") {\n    return [].concat(_toConsumableArray(options.messages.browser ? [(0, _pluginsMessages2[\"default\"])(_extends({\n      styles: _optionMessagesBrowserStylesJs2[\"default\"]\n    }, typeof options.messages.browser === \"object\" ? options.messages.browser : {}))] : []), _toConsumableArray(options.messages.console ? [(0, _postcssReporter2[\"default\"])(_extends({}, typeof options.messages.console === \"object\" ? options.messages.console : {}))] : []));\n  }\n\n  // otherwise nothing :)\n  return [];\n};\n\nmodule.exports = exports[\"default\"];","/home/travis/build/npmtest/node-npmtest-cssnext/node_modules/cssnext/dist/plugins/messages.js":"// why this plugin ?\n// https://github.com/postcss/postcss-messages/issues/16\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar _postcss = require(\"postcss\");\n\nvar _postcss2 = _interopRequireDefault(_postcss);\n\nvar _chalk = require(\"chalk\");\n\nvar _chalk2 = _interopRequireDefault(_chalk);\n\n// http://www.w3.org/TR/CSS2/syndata.html#characters\n// tl;dr: escape as utf-16 all non ascii chars + new lines & quotes\nfunction escapeForCSS(string) {\n  var newString = \"\";\n  for (var i = 0; i < string.length; i++) {\n    var ch = string.charAt(i);\n    switch (ch) {\n      case \"\\n\":\n      case \"\\r\":\n        newString += \"\\\\A \";\n        break;\n\n      case \"\\\\\":\n      case \"\\'\":\n      case \"\\\"\":\n        newString += \"\\\\\" + ch;\n        break;\n\n      default:\n        // non ascii\n        if (!ch.match(/^[\\x00-\\x7F]*$/)) {\n          var hexCh = string.charCodeAt(i).toString(16);\n          while (hexCh.length < 4) {\n            hexCh = \"0\" + hexCh;\n          }\n          // space at the end is required\n          newString += \"\\\\\" + hexCh + \" \";\n          continue;\n        }\n        newString += string[i];\n    }\n  }\n\n  return newString;\n}\n\nexports[\"default\"] = _postcss2[\"default\"].plugin(\"postcss-messages\", function (options) {\n  options = _extends({}, options);\n\n  if (options.disabled) {\n    return function () {};\n  }\n\n  var defaultStyles = {\n    // ...\n  };\n  var styles = options.styles ? options.styles : defaultStyles;\n\n  return function (css, result) {\n    var messages = result.warnings();\n    if (messages.length === 0) {\n      return;\n    }\n\n    var selector = \"html::before\";\n    if (options.selector) {\n      selector = options.selector;\n    } else {\n      css.eachRule(function (rule) {\n        if (rule.selector === \"html::before\" || rule.selector === \"html:before\") {\n          selector = \"html::after\";\n        }\n      });\n    }\n\n    css.append({ selector: selector });\n    Object.keys(styles).forEach(function (key) {\n      css.last.append({\n        prop: key,\n        value: styles[key]\n      });\n    });\n\n    var bullet = \"›\";\n    var content = messages.map(function (message) {\n      return message.toString();\n    }).join(\"\\n\\n\\n\" + bullet + \" \");\n\n    css.last.append({\n      prop: \"content\",\n      value: \"\\\"\" + escapeForCSS(bullet + \" \" + _chalk2[\"default\"].stripColor(content)) + \"\\\"\"\n    });\n  };\n});\nmodule.exports = exports[\"default\"];","/home/travis/build/npmtest/node-npmtest-cssnext/node_modules/cssnext/dist/option.messages.browser.styles.js":"// not using fs for in browser usage (playground)\n//\n// source: http://iconmonstr.com/warning-3-icon/\n/* eslint-disable max-len */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar svgGradient = \"\\n<linearGradient id=\\\"SVGID_1_\\\" gradientUnits=\\\"userSpaceOnUse\\\" x1=\\\"125.7515\\\" y1=\\\"307.4834\\\" x2=\\\"125.7514\\\" y2=\\\"-73.4854\\\" gradientTransform=\\\"matrix(1 0 0 -1 -50 373)\\\">\\n  <stop  offset=\\\"0\\\" style=\\\"stop-color:#428BCA\\\"/>\\n  <stop  offset=\\\"0.325\\\" style=\\\"stop-color:#507DBF\\\"/>\\n  <stop  offset=\\\"1\\\" style=\\\"stop-color:#5C71B6\\\"/>\\n</linearGradient>\";\nvar warningSVG = (\"\\n<svg version=\\\"1.1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" x=\\\"0px\\\" y=\\\"0px\\\"\\n  width=\\\"512px\\\" height=\\\"512px\\\" viewBox=\\\"0 0 512 512\\\" enable-background=\\\"new 0 0 512 512\\\" xml:space=\\\"preserve\\\">\\n  \" + svgGradient + \"\\n  <path\\n    fill=\\\"url(#SVGID_1_)\\\"\\n    d=\\\"M256.002,50C142.23,50,50,142.229,50,256.001C50,369.771,142.23,462,256.002,462C369.771,462,462,369.771,462,256.001C462,142.229,369.771,50,256.002,50z M256.46,398.518c-16.207,0-29.345-13.139-29.345-29.346c0-16.205,13.138-29.342,29.345-29.342c16.205,0,29.342,13.137,29.342,29.342C285.802,385.379,272.665,398.518,256.46,398.518zM295.233,158.239c-2.481,19.78-20.7,116.08-26.723,147.724c-1.113,5.852-6.229,10.1-12.187,10.1h-0.239c-6.169,0-11.438-4.379-12.588-10.438c-6.1-32.121-24.293-128.504-26.735-147.971c-2.94-23.441,15.354-44.171,38.977-44.171C279.674,113.483,298.213,134.488,295.233,158.239z\\\"\\n  />\\n</svg>\\n\").trim();\n/* eslint-enable max-len */\n\nexports[\"default\"] = {\n  display: \"block\",\n  \"white-space\": \"pre-wrap\",\n\n  // not a problem for old browsers, box will still be on top of body\n  position: \"fixed\",\n  top: 0,\n  left: 0,\n  right: 0,\n  \"z-index\": 10000, // just in case you know\n\n  \"font-size\": \".9em\",\n  padding: \"1.5em 1em 1.5em 4.5em\", // padding + background image padding\n\n  color: \"#318edf\",\n  \"background-color\": \"#fff\",\n\n  background: \"url(\\n      \\\"data:image/svg+xml;charset=utf-8,\" + encodeURIComponent(warningSVG) + \"\\\"\\n    ) 1em 1em / 2.5em 2.5em no-repeat, #fff\",\n\n  // sugar\n  \"border-bottom\": \"4px solid #318edf\",\n  \"box-shadow\": \"0 0 .6em rgba(0,0,0, .25)\",\n\n  // nice font\n  \"font-family\": \"Menlo, Monaco, monospace\"\n};\nmodule.exports = exports[\"default\"];","/home/travis/build/npmtest/node-npmtest-cssnext/node_modules/cssnext/webpack.config.js":"const webpack = require(\"webpack\")\nconst ExtractTextPlugin = require(\"extract-text-webpack-plugin\")\n\nconst buildConfig = require(\"./build.config\")\n\nmodule.exports = {\n  resolve: {\n    extensions: [\n      \"\",\n      \".js\",\n      \".json\",\n      \".css\",\n    ],\n  },\n\n  module: {\n    // ! \\\\ note that loaders are executed from bottom to top !\n    loaders: [\n      {\n        test: /\\.(jsx?|es)$/,\n        loaders: [\n          \"babel\",\n          \"eslint\",\n        ],\n        exclude: /node_modules/,\n      },\n      {\n        test: /\\.json$/,\n        loaders: [\n          \"json\",\n        ],\n      },\n      {\n        test: /\\.css$/,\n        loader: ExtractTextPlugin.extract(\n          \"style-loader\",\n          \"css-loader!cssnext-loader\"\n        ),\n      },\n      {\n        test: /\\.(ico|jpe?g|png|gif|svg)$/,\n        loaders: [\n          \"file?name=[path][name].[ext]&context=./docs/src\",\n        ],\n      },\n    ],\n  },\n\n  plugins: ([\n    new webpack.DefinePlugin(buildConfig),\n    new ExtractTextPlugin(\"[name].css\", {disable: !buildConfig.__PROD__}),\n  ].concat(\n      buildConfig.__PROD__\n      ? [\n        new webpack.optimize.DedupePlugin(),\n        new webpack.optimize.UglifyJsPlugin({\n          compress: {\n            warnings: false,\n          },\n        }),\n      ]\n      : []\n    )\n  ),\n\n  node: {\n    // https://github.com/webpack/webpack/issues/451\n    // run tape test with webpack\n    fs: \"empty\",\n  },\n}\n","/home/travis/build/npmtest/node-npmtest-cssnext/node_modules/cssnext/src/bin.js":"#!/usr/bin/env node\n\nimport fs from \"fs\"\nimport path from \"path\"\n\n// until this land in a stable version of node (for a while)\n// https://github.com/joyent/node/commit/20176a\n// we will this instead of process.exit()\nimport exit from \"exit\"\n\nimport mkdirp from \"mkdirp\"\nimport color from \"chalk\"\nimport program from \"commander\"\n\nimport cssnext from \"..\"\nimport pkg from \"../package\"\n\nprogram\n  .version(pkg.version)\n  .usage(\"[options] [<input> [<output>]]\")\n  .option(\"-C, --config <file>\", \"use the config file\")\n  .option(\"-b, --browsers <items>\", \"browsers list (comma separated)\")\n  .option(\"-I, --no-import\", \"do not inline @import\")\n  .option(\"-U, --no-url\", \"do not adjust url()\")\n  .option(\"-c, --compress\", \"compress output\")\n  .option(\"-s, --sourcemap\", \"add sourcemap\")\n  .option(\"-w, --watch\", \"watch the input file for changes\")\n  .option(\"-v, --verbose\", \"verbose output\")\n\n// register features as flag\nconst format = require(\"util\").format\nconst toSlug = require(\"to-slug-case\")\nconst toSpace = require(\"to-space-case\")\nObject.keys(cssnext.features).forEach(function(feature) {\n  const flag = format(\"--no-%s\", toSlug(feature))\n  const desc = format(\"disable %s support\", toSpace(feature))\n  program.option(flag, desc)\n})\n\n/* eslint-disable no-multiple-empty-lines */\nprogram.on(\"--help\", function() {\n  console.log(function() {/*\n  Examples:\n\n    # pass an input and output file\n    $ cssnext input.css output.css\n\n\n    # start cssnext watcher (need input & output)\n    $ cssnext --watch input.css output.css\n\n\n    # using stdin and stdout\n    $ cat input.css | cssnext > output.css\n  */\n  }.toString().split(\"\\n\").slice(1, -2).join(\"\\n\"))\n})\n/* eslint-enable no-multiple-empty-lines */\n\nprogram.parse(process.argv)\n\nconst config = program.config ? require(path.resolve(program.config)) : {}\nif (!config.features) {\n  config.features = {}\n}\n// command line flags override config file\nObject.keys(cssnext.features).forEach(function(feature) {\n  if (program[feature] === false) {\n    config.features[feature] = false\n  }\n})\nif (\"browsers\" in program) {\n  config.browsers = program.browsers\n}\nif (\"import\" in program) {\n  config.import = program.import\n}\nif (\"url\" in program) {\n  config.url = program.url\n}\nif (\"sourcemap\" in program) {\n  config.sourcemap = program.sourcemap\n}\nif (\"compress\" in program) {\n  config.compress = program.compress\n}\nif (\"watch\" in program) {\n  config.watch = program.watch\n}\n\nconst input = program.args[0] ? path.resolve(program.args[0]) : null\nconst output = program.args[1] ? path.resolve(program.args[1]) : null\nconst verbose = program.verbose\n\nif (input && !fs.existsSync(input)) {\n  console.error(color.red(\"Unable to read file\"), input)\n  exit(1)\n}\n\nconfig.from = input\nconfig.to = output\n\nif (output) {\n  mkdirp.sync(path.dirname(output))\n}\n\n// init & adjust watcher with postcss-import dependencies\nlet watcher\nif (config.watch) {\n  if (!input || !output) {\n    console.error(\n      color.red(\"--watch option need both <input> & <output> files to work\")\n    )\n    exit(3)\n  }\n\n  watcher = require(\"chokidar\").watch(input, {ignoreInitial: true})\n\n  if (verbose) {\n    log(color.cyan(\"Watching\"), input)\n  }\n\n  // https://github.com/paulmillr/chokidar/issues/288\n  // ready event might not be triggered at all\n  // watcher.on(\"ready\", function() {\n  //   if (verbose) {\n  //     log(color.cyan(\"Watcher ready\"), input)\n  //   }\n  // })\n\n  watcher.on(\"change\", transform)\n\n  // watch `@import`ed files\n  if (config.import) {\n    // keep a up to date list of imported files\n    let importedFiles = [input]\n    const arrayDiff = function(array, array2) {\n      return array.filter(function(i) {\n        return array2.indexOf(i) < 0\n      })\n    }\n\n    const rebaseFile = function(file) {\n      return path.relative(process.cwd(), file)\n    }\n\n    const watcherOnImport = function(imported) {\n      const toUnwatch = arrayDiff(importedFiles, imported)\n      const toWatch = arrayDiff(imported, importedFiles)\n      toUnwatch.forEach(function(file) {\n        watcher.unwatch(rebaseFile(file))\n      })\n      toWatch.forEach(function(file) {\n        watcher.add(rebaseFile(file))\n      })\n      importedFiles = imported\n    }\n\n    // import need an object so we can pass onImport() cb\n    if (typeof config.import !== \"object\") {\n      config.import = {}\n    }\n\n    // keep the existing onImport callback if any\n    if (config.import.onImport) {\n      config.import.onImport = function(files) {\n        const originalOnImport = config.import.onImport\n        watcherOnImport(files)\n        originalOnImport(files)\n      }\n    }\n    // or just add the watcher updater onImport() cb\n    else {\n      config.import.onImport = watcherOnImport\n    }\n  }\n}\n\nfunction transform() {\n  require(\"read-file-stdin\")(input, function(err, buffer) {\n    if (err) {\n      throw err\n    }\n\n    try {\n      const css = cssnext(buffer.toString(), config)\n\n      require(\"write-file-stdout\")(output, css)\n      if (verbose && output) {\n        log(color.cyan(\"Output written\"), output)\n      }\n    }\n    catch (e) {\n      console.error()\n      console.error(color.bold(\"cssnext encounters an error:\"))\n      console.error()\n      console.error(color.red(e.message))\n      if (e.stack) {\n        console.error(e.stack.split(\"\\n\").slice(1).join(\"\\n\").grey)\n        console.error()\n      }\n      console.error(\"If this error looks like a bug, please report it here:\")\n      console.error(color.grey(\"❯ \") + color.cyan(pkg.bugs.url))\n      console.error()\n      if (!config.watch) {\n        exit(2)\n      }\n    }\n  })\n}\n\ntransform()\n\n/**\n * log content prefixed by time\n *\n * @return {String} output all given parameters prefixed by the current locale\n * time\n */\nfunction log() {\n  const args = [].slice.call(arguments)\n  args.unshift(\"[\" + color.grey(new Date().toLocaleTimeString()) + \"]\")\n  console.log.apply(console.log, args)\n}\n","/home/travis/build/npmtest/node-npmtest-cssnext/node_modules/cssnext/src/features-activation-map.js":"// Some features might affect others (eg: var() in a calc()\n// in order to prevent issue, the map contains a sort of dependencies list\n//\n// null == always enable (& no caniuse data)\nexport default {\n  customProperties: [\"css-variables\"],\n  // calc() transformation only make sense with transformed custom properties,\n  // don't you think ?\n  // calc: null,\n  // @todo open PR on caniuse repo https://github.com/Fyrd/caniuse\n  // customMedia: [null],\n  // mediaQueriesRange: [null],\n  // customSelectors: [null],\n  // colorRebeccapurple: [null], // @todo can be done easily\n  // colorHwb: [null],\n  // colorGray: [null],\n  // colorHexAlpha: [null],\n  // colorFunction:[null],\n  // fontVariant: [null],\n  // @todo can be done using a callback, this is only used for Firefox < 35\n  // filter: [null],\n  rem: [\"rem\"],\n  pseudoElements: [\"css-gencontent\"],\n  // pseudoClassMatches: [null],\n  // pseudoClassNot: [null],\n  colorRgba: [\"css3-colors\"],\n  // will always be null since autoprefixer does the same game as we do\n  // autoprefixer: [null]\n}\n","/home/travis/build/npmtest/node-npmtest-cssnext/node_modules/cssnext/src/features.js":"export default {\n  // Reminder: order is important\n  customProperties(options) {\n    return require(\"postcss-custom-properties\")(options)\n  },\n  calc(options) {\n    return require(\"postcss-calc\")(options)\n  },\n  customMedia(options) {\n    return require(\"postcss-custom-media\")(options)\n  },\n  mediaQueriesRange(options) {\n    return require(\"postcss-media-minmax\")(options)\n  },\n  customSelectors(options) {\n    return require(\"postcss-custom-selectors\")(options)\n  },\n  colorRebeccapurple(options) {\n    return require(\"postcss-color-rebeccapurple\")(options)\n  },\n  colorHwb(options) {\n    return require(\"postcss-color-hwb\")(options)\n  },\n  colorGray(options) {\n    return require(\"postcss-color-gray\")(options)\n  },\n  colorHexAlpha(options) {\n    return require(\"postcss-color-hex-alpha\")(options)\n  },\n  colorFunction(options) {\n    return require(\"postcss-color-function\")(options)\n  },\n  fontVariant(options) {\n    return require(\"postcss-font-variant\")(options)\n  },\n  filter(options) {\n    return require(\"pleeease-filters\")(options)\n  },\n  rem(options) {\n    return require(\"pixrem\")(options)\n  },\n  pseudoElements(options) {\n    return require(\"postcss-pseudoelements\")(options)\n  },\n  pseudoClassMatches(options) {\n    return require(\"postcss-selector-matches\")(options)\n  },\n  pseudoClassNot(options) {\n    return require(\"postcss-selector-not\")(options)\n  },\n  pseudoClassAnyLink(options) {\n    return require(\"postcss-pseudo-class-any-link\")(options)\n  },\n  colorRgba(options) {\n    return require(\"postcss-color-rgba-fallback\")(options)\n  },\n  autoprefixer(options) {\n    return require(\"autoprefixer-core\")(options)\n  },\n}\n","/home/travis/build/npmtest/node-npmtest-cssnext/node_modules/cssnext/src/option.messages.browser.styles.js":"// not using fs for in browser usage (playground)\n//\n// source: http://iconmonstr.com/warning-3-icon/\n/* eslint-disable max-len */\nconst svgGradient = `\n<linearGradient id=\"SVGID_1_\" gradientUnits=\"userSpaceOnUse\" x1=\"125.7515\" y1=\"307.4834\" x2=\"125.7514\" y2=\"-73.4854\" gradientTransform=\"matrix(1 0 0 -1 -50 373)\">\n  <stop  offset=\"0\" style=\"stop-color:#428BCA\"/>\n  <stop  offset=\"0.325\" style=\"stop-color:#507DBF\"/>\n  <stop  offset=\"1\" style=\"stop-color:#5C71B6\"/>\n</linearGradient>`\nconst warningSVG = `\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n  width=\"512px\" height=\"512px\" viewBox=\"0 0 512 512\" enable-background=\"new 0 0 512 512\" xml:space=\"preserve\">\n  ${ svgGradient }\n  <path\n    fill=\"url(#SVGID_1_)\"\n    d=\"M256.002,50C142.23,50,50,142.229,50,256.001C50,369.771,142.23,462,256.002,462C369.771,462,462,369.771,462,256.001C462,142.229,369.771,50,256.002,50z M256.46,398.518c-16.207,0-29.345-13.139-29.345-29.346c0-16.205,13.138-29.342,29.345-29.342c16.205,0,29.342,13.137,29.342,29.342C285.802,385.379,272.665,398.518,256.46,398.518zM295.233,158.239c-2.481,19.78-20.7,116.08-26.723,147.724c-1.113,5.852-6.229,10.1-12.187,10.1h-0.239c-6.169,0-11.438-4.379-12.588-10.438c-6.1-32.121-24.293-128.504-26.735-147.971c-2.94-23.441,15.354-44.171,38.977-44.171C279.674,113.483,298.213,134.488,295.233,158.239z\"\n  />\n</svg>\n`.trim()\n/* eslint-enable max-len */\n\nexport default {\n  display: \"block\",\n  \"white-space\": \"pre-wrap\",\n\n  // not a problem for old browsers, box will still be on top of body\n  position: \"fixed\",\n  top: 0,\n  left: 0,\n  right: 0,\n  \"z-index\": 10000, // just in case you know\n\n  \"font-size\": \".9em\",\n  padding: \"1.5em 1em 1.5em 4.5em\", // padding + background image padding\n\n  color: \"#318edf\",\n  \"background-color\": \"#fff\",\n\n  background: (\n    `url(\n      \"data:image/svg+xml;charset=utf-8,${encodeURIComponent(warningSVG)}\"\n    ) 1em 1em / 2.5em 2.5em no-repeat, #fff`\n  ),\n\n  // sugar\n  \"border-bottom\": \"4px solid #318edf\",\n  \"box-shadow\": \"0 0 .6em rgba(0,0,0, .25)\",\n\n  // nice font\n  \"font-family\": \"Menlo, Monaco, monospace\",\n}\n","/home/travis/build/npmtest/node-npmtest-cssnext/node_modules/cssnext/src/option.messages.js":"import postcssMessagesConsole from \"postcss-reporter\"\n// https://github.com/postcss/postcss-messages/issues/16\n// import postcssMessagesCSS from \"postcss-messages\"\nimport postcssMessagesCSS from \"./plugins/messages\"\nimport postcssMessageCSSstyles from \"./option.messages.browser.styles.js\"\n\nexport default (options) => {\n    // true === all interfaces\n  if (options.messages === true) {\n    return [\n      postcssMessagesCSS({styles: postcssMessageCSSstyles}),\n      postcssMessagesConsole,\n    ]\n  }\n\n  // object: only the one you want\n  if (typeof options.messages === \"object\") {\n    return [\n      ...options.messages.browser\n      ? [\n        postcssMessagesCSS({\n          styles: postcssMessageCSSstyles,\n          ...(\n            typeof options.messages.browser === \"object\"\n            ? options.messages.browser\n            : {}\n          ),\n        }),\n      ]\n      : [],\n      ...options.messages.console\n      ? [\n        postcssMessagesConsole({\n          ...(\n            typeof options.messages.console === \"object\"\n            ? options.messages.console\n            : {}\n          ),\n        }),\n      ]\n      : [],\n    ]\n  }\n\n  // otherwise nothing :)\n  return []\n}\n","/home/travis/build/npmtest/node-npmtest-cssnext/node_modules/cssnext/src/fixes/custom-selectors-missing-colon.js":"import postcss from \"postcss\"\n\nexport default postcss.plugin(\n  \"cssnext\",\n  () => {\n    const cs = \"@custom-selector\"\n\n    return (styles, result) => {\n      let alert = false\n      styles.eachAtRule(\"custom-selector\", rule => {\n        if (rule.params.indexOf(\"--\") === 0) {\n\n          // display big warning once\n          if (!alert) {\n            alert = true\n            result.warn(\n              `Previously ${ cs } were working with and without pseudo ` +\n              `syntax ':'. Now you must use '${ cs } :--{name}' syntax ` +\n              `instead of '${ cs } --{name}'. The support of ` +\n              `syntax without ':' and this warning will be remove in the ` +\n              `next major release.`\n            )\n          }\n\n          result.warn(\n            [\n              `Incorrect syntax for ${ cs }.`,\n              `  ${ cs } ${ rule.params }`,\n              `Should be:`,\n              `  ${ cs } :${ rule.params }`,\n            ].join(\"\\n\\n\"),\n            {node: rule}\n          )\n\n          // fix for postcss-custom-selectors 2.x\n          rule.params = \":\" + rule.params\n        }\n      })\n    }\n  }\n)\n","/home/travis/build/npmtest/node-npmtest-cssnext/node_modules/cssnext/src/plugins/messages.js":"// why this plugin ?\n// https://github.com/postcss/postcss-messages/issues/16\n\nimport postcss from \"postcss\"\nimport colors from \"chalk\"\n\n// http://www.w3.org/TR/CSS2/syndata.html#characters\n// tl;dr: escape as utf-16 all non ascii chars + new lines & quotes\nfunction escapeForCSS(string) {\n  let newString = \"\"\n  for (let i = 0; i < string.length; i++) {\n    const ch = string.charAt(i)\n    switch (ch) {\n    case \"\\n\":\n    case \"\\r\":\n      newString += \"\\\\A \"\n      break\n\n    case \"\\\\\":\n    case \"\\'\":\n    case \"\\\"\":\n      newString += \"\\\\\" + ch\n      break\n\n    default:\n      // non ascii\n      if (!ch.match(/^[\\x00-\\x7F]*$/)) {\n        let hexCh = string.charCodeAt(i).toString(16)\n        while (hexCh.length < 4) {\n          hexCh = \"0\" + hexCh\n        }\n        // space at the end is required\n        newString += \"\\\\\" + hexCh + \" \"\n        continue\n      }\n      newString += string[i]\n    }\n  }\n\n  return newString\n}\n\nexport default postcss.plugin(\n  \"postcss-messages\",\n  (options) => {\n    options = {\n      ...options,\n    }\n\n    if (options.disabled) {\n      return function() {}\n    }\n\n    const defaultStyles = {\n      // ...\n    }\n    const styles = options.styles\n      ? options.styles\n      : defaultStyles\n\n    return (css, result) => {\n      const messages = result.warnings()\n      if (messages.length === 0) {\n        return\n      }\n\n      let selector = \"html::before\"\n      if (options.selector) {\n        selector = options.selector\n      }\n      else {\n        css.eachRule(rule => {\n          if (\n            rule.selector === \"html::before\" ||\n            rule.selector === \"html:before\"\n          ) {\n            selector = \"html::after\"\n          }\n        })\n      }\n\n      css.append({selector})\n      Object.keys(styles).forEach(key => {\n        css.last.append({\n          prop: key,\n          value: styles[key],\n        })\n      })\n\n      const bullet = \"›\"\n      const content = messages.map(message => message.toString())\n        .join(`\\n\\n\\n${ bullet } `)\n\n      css.last.append({\n        prop: \"content\",\n        value: (\n          \"\\\"\" +\n          escapeForCSS(`${ bullet } ${ colors.stripColor(content) }`) +\n          \"\\\"\"\n        ),\n      })\n    }\n  }\n)\n"}